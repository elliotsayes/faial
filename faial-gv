#!/usr/bin/env python3

import argparse
import shlex
import sys
import json

def read_lines(fp, count, buffer_size=512):
  contents = ""
  is_final = False
  while count > 0 and not is_final:
    data = fp.read(buffer_size).decode("utf8", "ignore")
    contents += data
    is_final = len(data) != buffer_size
    count -= data.count("\n")
  contents = contents.split("\n")
  return contents if len(contents) < count else contents[:count]


def get_lines(fp):
  try:
    for line in read_lines(fp, 2):
      line = line.strip()
      if not line.startswith("//"):
        return
      yield line[len("//"):]
  except UnicodeDecodeError:
    raise

VARS = ["blockDim", "gridDim"]
FIELDS = ["x", "y", "z"]

def parse_args(line):
  parser = argparse.ArgumentParser()
  parser.add_argument("--blockDim", default=[])
  parser.add_argument("--gridDim", default=[])
  parser.add_argument("--warp-sync", type=int)
  parser.add_argument("--no-inline", action="store_true")
  parser.add_argument("--only-intra-group", action="store_true")
  parser.add_argument("-D", dest="props", action="append")
  args = parser.parse_args(shlex.split(line))
  for name in VARS:
    elem = getattr(args, name)
    if elem is not None:
      setattr(args, name, json.loads(elem))
  return args

def cleanup_args(args):
  to_remove = set()
  result = dict()
  for name in VARS:
    elem = getattr(args, name)
    if isinstance(elem, int):
      elem = [elem]
    if not isinstance(elem, list):
      raise ValueError(name, elem)
    for field, data in zip(FIELDS, elem):
      to_remove.add(name)
      result[name + "." + field] = data
  return result

def parse(fp):
  lines = list(get_lines(fp))
  if len(lines) != 2:
    return
  args = parse_args(lines[1])
  args.result = lines[0]
  return args, cleanup_args(args)

def serialize(data):
  result = []
  for k,v in sorted(data.items()):
    result.append(f"-D{k}={v}")
  return " ".join(result)

def main():
  for fname in sys.argv[1:]:
    with open(fname, "rb") as fp:
      data = parse(fp)
      if data is not None:
        print(serialize(data[1]))

if __name__ == '__main__':
  main()