#!/usr/bin/env python3
from beautifultable import BeautifulTable

def group_data(data):
    row = []
    for elem in data:
        if len(row) < 2:
            row.append(elem)
        if len(row) == 2:
            yield tuple(row)
            row.clear()

def parse_const(row):
    return row[1].value(), row[-1]

def parse_model(data):
    for row in data[1:]:
        yield parse_const(row)

def structure_state(data):
    task1 = dict()
    task2 = dict()
    global_state = dict()
    TARGETS = [("_1$", task1), ("_2$", task2), ("", global_state)]
    for k,v in data.items():
        for (prefix, target) in TARGETS:
            if k.endswith("$"):
                continue
            if k.startswith(prefix):
                target[k[len(prefix):]] = v
                break
    tables = (task1, task2, global_state)
    for name in ("blockDim", "gridDim", "blockIdx", "threadIdx"):
        for task in tables:
            task[name] = []
        for field in ("x", "y", "z"):
            target = name + "." + field
            for task in tables:
                if target in task:
                    task[name].append(task[target])
                    del task[target]
        for task in tables:
            if len(task[name]) == 0:
                del task[name]

    return (task1, task2, global_state)


def parse_result(row):
    msg, data = row
    if msg.value() == 'unsat':
        return
    assert msg.value() == 'sat'
    return structure_state(dict(parse_model(data)))


def handle(row):
    res = parse_result(row)
    if res is not None:
        if res is not None:
            task1, task2, global_state = res
            table = BeautifulTable()
            table.column_headers = ("", "T1", "T2", "GLOBAL")
            for k, v in sorted(global_state.items()):
                table.append_row((k,"", "", v))
            table.append_row(("-*-", " ", " ", " "))
            for k, v in sorted(task1.items()):
                table.append_row((k,v,task2[k], ""))

            print(table)
            print()

#print(dir(row[0]))

def show(data):
    for row in group_data(data):
        handle(row)

if __name__ == '__main__':
    import sys
    import sexpdata
    data = "(" + sys.stdin.read() + ")"
    show(sexpdata.loads(data))
    #for data in handle(sys.stdin.read()):
    #    print(repr(sexpdata.loads(data)))

