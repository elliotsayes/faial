#|

Proof that computeFloatSum is DRF:

https://github.com/pandegroup/openmm/blob/master/platforms/cuda/src/kernels/customIntegrator.cu#L1

|#

# Declare shared variables
shared sumBuffer, tempBuffer, result;

# Declare global constants:
const local blockDim_x,
  SUM_BUFFER_SIZE,
  WORK_GROUP_SIZE,
  local $tid; # We must declare $tid as a thread-local variable

# We must also declare $tid as being unique across threads
# That is: no two threads have the same $tid.
assert 1@$tid != 2@$tid;

loop index < SUM_BUFFER_SIZE {
  assert index >= $tid;
  assert (index - $tid) % blockDim_x == 0;
  ro sumBuffer[index];
}; # We require a semi after a loop

rw tempBuffer[$tid];
loop i < WORK_GROUP_SIZE {
  assert i >= 1;
  assert pow2(i);
  sync;
  ro tempBuffer[$tid + i]  if ($tid%(i*2) == 0 && $tid+i < WORK_GROUP_SIZE);
  rw tempBuffer[$tid] if ($tid%(i*2) == 0 && $tid+i < WORK_GROUP_SIZE);
};

ro tempBuffer[0] if $tid == 0;
rw result[0] if $tid == 0;
