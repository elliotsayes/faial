# https://github.com/SoftwareFoundationGroupAtKyotoU/VeriCUDA/blob/master/samples/mask.cu
#|
__global__ void uniform (int *a) {
  /*@ ensures \forall t : thread; \forall t1 : thread;
        a[threadIdx.x@t] == a[threadIdx.x@t1]; */
  int i = 0;
  a[threadIdx.x] = 0;
  /*@ loop invariant \forall t : thread; \forall t1 : thread;
        i@t == i@t1;
      loop invariant \forall t : thread; \forall t1 : thread;
        a[threadIdx.x@t] == a[threadIdx.x@t1]; */
  while (i < 3) {
    a[threadIdx.x]++;
    i++;
  }
}
|#

shared a;
const local threadIdx.x, global n;
assert distinct [threadIdx.x];
rw a[threadIdx.x];
foreach i < n {
  rw a[threadIdx.x];
}
