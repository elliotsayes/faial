# Source: https://github.com/mingouyang/bandDepth/blob/master/gpuBD2.cu#L15-L47

shared func, count, minVector, maxVector;
const global MaxCol,
      local blockIdx_y,
      local blockIdx_x,
      local threadIdx_x,
      global m,
      global n,
      local myFunc,
      local id;

assert distinct [threadIdx_x][blockIdx_x];

assert blockIdx_y > blockIdx_x;
assert threadIdx_x < m;

assert m >= 1;
assert id == blockIdx_x * m + threadIdx_x;

# XXX: we are currently unable to solve this, so we assume a fixed size
# prove distinct [id];
assert m == 2048;


# funcValue = Func(blockIdx.x, threadIdx.x); //func 1
if (threadIdx_x < m) {
    ro func[id];

    # minVector[threadIdx.x] = funcValue;
    rw minVector[id];

    # maxVector[threadIdx.x] = funcValue;
    rw maxVector[id];

    # funcValue = Func(blockIdx.y + 1, threadIdx.x);
    ro func[id + m];

    # minVector[threadIdx.x] = min(minVector[threadIdx.x], funcValue);
    rw minVector[id];

    # maxVector[threadIdx.x] = max(maxVector[threadIdx.x], funcValue);
    rw maxVector[id];
}
sync;

foreach (i in 0.. n)
  foreach (j in 0.. m) {
    # funcValue = Func(myFunc, j);
    assert myFunc == i + threadIdx_x;
    if (myFunc < n) ro func[j * m + myFunc];
  }
