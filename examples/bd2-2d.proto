# Source: https://github.com/mingouyang/bandDepth/blob/master/gpuBD2.cu#L15-L47

shared func, count, minVector, maxVector;
const global MaxCol,
      local blockIdx_y,
      local blockIdx_x,
      local threadIdx_x,
      global m,
      global n,
      local myFunc,
      where
        distinct [blockIdx_x][threadIdx_x] &&
        threadIdx_x < m;

let id = blockIdx_x * m + threadIdx_x;
# XXX: we are currently unable to solve this, so we assume a size
#prove distinct [id];

# funcValue = Func(blockIdx.x, threadIdx.x); //func 1

if (threadIdx_x < m) {
    ro func[blockIdx_x][threadIdx_x];

    # minVector[threadIdx.x] = funcValue;
    rw minVector[blockIdx_x][threadIdx_x];

    # maxVector[threadIdx.x] = funcValue;
    rw maxVector[blockIdx_x][threadIdx_x];

    # funcValue = Func(blockIdx.y + 1, threadIdx.x);
    ro func[blockIdx_y + 1][threadIdx_x];

    # minVector[threadIdx.x] = min(minVector[threadIdx.x], funcValue);
    rw minVector[blockIdx_x][threadIdx_x];

    # maxVector[threadIdx.x] = max(maxVector[threadIdx.x], funcValue);
    rw maxVector[blockIdx_x][threadIdx_x];
}
sync;

foreach (i in 0 .. n) {
  foreach (j in 0 .. m) {
    # funcValue = Func(myFunc, j);
    let myFunc = i + threadIdx_x;
    if (myFunc < n) ro func[myFunc][j];
  }
}
