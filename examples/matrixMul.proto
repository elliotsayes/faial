#|

Source: https://github.com/NVIDIA/cuda-samples/blob/master/Samples/matrixMulDrv/matrixMul_kernel.cu

|#


shared C, A, B, As, Bs;
const
  global wA,
  global wB,
  local bx,
  local by,
  local tx,
  local ty,
  local aBegin,
  local aEnd,
  global aStep,
  local bBegin,
  global bStep,
  global block_size,
  global bEnd,
  global gridDim.x,
  global gridDim.y,
  local b,
  local c,
  local d,
  ;

# GPUVerify assumptions
assert gridDim.x == 20;
assert gridDim.y == 10;
assert tx < 32;
assert ty < 32;
assert block_size == 32;
assert wA == 320;
assert wB == 640;

# Assumption
assert bx < gridDim.x;
assert by < gridDim.y;

assert distinct [tx][ty][bx][by];
assert aBegin == wA * block_size * by;
assert aEnd == aBegin + wA - 1;
assert aStep == block_size;
assert bBegin == block_size * bx;
assert bStep == block_size * wB;
assert wA > 1 && block_size > 0 && wB > 1;
assert wA == block_size * gridDim.y;
assert wB == block_size * gridDim.x;

foreach (a in 0 .. aEnd + 1) {
  assert a >= aBegin && (a - aBegin) % aStep == 0;
  assert b >= bBegin && (b - bBegin) % bStep == 0;
  rw As[by][bx][ty][tx];
  rw Bs[by][bx][ty][tx];
  ro A[a + wA * ty + tx];
  ro B[b + wB * ty + tx];
  sync;
  foreach (k in 0.. block_size) {
    ro As[ty][k];
    ro Bs[k][tx];
  }
  sync;
}

assert tx < block_size;
assert ty < block_size;
assert c == wB * block_size * by + block_size * bx;
assert d == wB * ty + tx;

rw C[c + d];
