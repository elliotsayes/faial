#|

Source: https://github.com/NVIDIA/cuda-samples/blob/master/Samples/matrixMulDrv/matrixMul_kernel.cu

|#


shared C, A, B, As, Bs;
const
  local bx,
  local by,
  local tx,
  local ty,
  local b,
where
  bx < gridDim.x &&
  by < gridDim.y &&
  # GPUVerify assumptions
  tx < 32 &&
  ty < 32 &&
  # Assumption
  distinct [tx][ty][bx][by] &&
  320 == block_size * gridDim.y &&
  640 == block_size * gridDim.x
  ;

# GPUVerify assumptions
# assert wA > 1 && block_size > 0 && wB > 1;
let gridDim.x = 20;
let gridDim.y = 10;
let block_size = 32;
let wA = 320;
let wB = 640;

# Assumptions
let aBegin = wA * block_size * by;
let aEnd = aBegin + wA - 1;
let aStep = block_size;
let bBegin = block_size * bx;
let bStep = block_size * wB;

foreach (a in aBegin .. aEnd + 1)
  if (
    (a - aBegin) % aStep == 0 &&
    b >= bBegin &&
    (b - bBegin) % bStep == 0
  ) {
  rw As[by][bx][ty][tx];
  rw Bs[by][bx][ty][tx];
  ro A[a + wA * ty + tx];
  ro B[b + wB * ty + tx];
  sync;
  foreach (k in 0.. block_size) {
    ro As[ty][k];
    ro Bs[k][tx];
  }
  sync;
}

if (tx < block_size && ty < block_size) {
  let c = wB * block_size * by + block_size * bx;
  let d = wB * ty + tx;
  rw C[c + d];
}
